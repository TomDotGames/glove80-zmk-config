/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2025 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

 #include <behaviors.dtsi>
 /* Include all behavior includes needed */
 #include <dt-bindings/zmk/outputs.h>
 #include <dt-bindings/zmk/keys.h>
 #include <dt-bindings/zmk/bt.h>
 #include <dt-bindings/zmk/rgb.h>
 
 /* On demand includes */
 
 
 /* Automatically generated layer name #define */
 #define LAYER_Base 0
 #define LAYER_Magic 1
 #define LAYER_Symbol 2
 #define LAYER_Nav 3
 #define LAYER_Num 4
 #define LAYER_VS 5
 
 /* To deal with the situation where there is no Lower layer, to keep &lower happy */
 #ifndef LAYER_Lower
 #define LAYER_Lower 0
 #endif
 
 /* Custom Device-tree */
 
 
 /* Input Listeners */
 
 
 /* System behavior and Macros */
 / {
     behaviors {
         // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
         // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
         lower: lower {
             compatible = "zmk,behavior-tap-dance";
             label = "LAYER_TAP_DANCE";
             #binding-cells = <0>;
             tapping-term-ms = <200>;
             bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
         };
     };
 };
 
 / {
     macros {
         rgb_ug_status_macro: rgb_ug_status_macro {
             label = "RGB_UG_STATUS";
             compatible = "zmk,behavior-macro";
             #binding-cells = <0>;
             bindings
                 = <&rgb_ug RGB_STATUS>;
         };
     };
 };
 
 
 / {
 #ifdef BT_DISC_CMD
     behaviors {
         bt_0: bt_0 {
             compatible = "zmk,behavior-tap-dance";
             label = "BT_0";
             #binding-cells = <0>;
             tapping-term-ms = <200>;
             bindings = <&bt_select_0>, <&bt BT_DISC 0>;
         };
         bt_1: bt_1 {
             compatible = "zmk,behavior-tap-dance";
             label = "BT_1";
             #binding-cells = <0>;
             tapping-term-ms = <200>;
             bindings = <&bt_select_1>, <&bt BT_DISC 1>;
         };
         bt_2: bt_2 {
             compatible = "zmk,behavior-tap-dance";
             label = "BT_2";
             #binding-cells = <0>;
             tapping-term-ms = <200>;
             bindings = <&bt_select_2>, <&bt BT_DISC 2>;
         };
         bt_3: bt_3 {
             compatible = "zmk,behavior-tap-dance";
             label = "BT_3";
             #binding-cells = <0>;
             tapping-term-ms = <200>;
             bindings = <&bt_select_3>, <&bt BT_DISC 3>;
         };
     };
     macros {
         bt_select_0: bt_select_0 {
             label = "BT_SELECT_0";
             compatible = "zmk,behavior-macro";
             #binding-cells = <0>;
             bindings
                 = <&out OUT_BLE>,
                   <&bt BT_SEL 0>;
         };
         bt_select_1: bt_select_1 {
             label = "BT_SELECT_1";
             compatible = "zmk,behavior-macro";
             #binding-cells = <0>;
             bindings
                 = <&out OUT_BLE>,
                   <&bt BT_SEL 1>;
         };
         bt_select_2: bt_select_2 {
             label = "BT_SELECT_2";
             compatible = "zmk,behavior-macro";
             #binding-cells = <0>;
             bindings
                 = <&out OUT_BLE>,
                   <&bt BT_SEL 2>;
         };
         bt_select_3: bt_select_3 {
             label = "BT_SELECT_3";
             compatible = "zmk,behavior-macro";
             #binding-cells = <0>;
             bindings
                 = <&out OUT_BLE>,
                   <&bt BT_SEL 3>;
         };
     };
 #else
     macros {
         bt_0: bt_0 {
             label = "BT_0";
             compatible = "zmk,behavior-macro";
             #binding-cells = <0>;
             bindings
                 = <&out OUT_BLE>,
                   <&bt BT_SEL 0>;
         };
         bt_1: bt_1 {
             label = "BT_1";
             compatible = "zmk,behavior-macro";
             #binding-cells = <0>;
             bindings
                 = <&out OUT_BLE>,
                   <&bt BT_SEL 1>;
         };
         bt_2: bt_2 {
             label = "BT_2";
             compatible = "zmk,behavior-macro";
             #binding-cells = <0>;
             bindings
                 = <&out OUT_BLE>,
                   <&bt BT_SEL 2>;
         };
         bt_3: bt_3 {
             label = "BT_3";
             compatible = "zmk,behavior-macro";
             #binding-cells = <0>;
             bindings
                 = <&out OUT_BLE>,
                   <&bt BT_SEL 3>;
         };
     };
 #endif
 };
 
 / {
     behaviors {
         magic: magic {
             compatible = "zmk,behavior-hold-tap";
             label = "MAGIC_HOLD_TAP";
             #binding-cells = <2>;
             flavor = "tap-preferred";
             tapping-term-ms = <200>;
             bindings = <&mo>, <&rgb_ug_status_macro>;
         };
     };
 };
 
 /* #define for key positions */
 #define POS_LH_T1 52
 #define POS_LH_T2 53
 #define POS_LH_T3 54
 #define POS_LH_T4 69
 #define POS_LH_T5 70
 #define POS_LH_T6 71
 #define POS_LH_C1R2 15
 #define POS_LH_C1R3 27
 #define POS_LH_C1R4 39
 #define POS_LH_C1R5 51
 #define POS_LH_C2R1 4
 #define POS_LH_C2R2 14
 #define POS_LH_C2R3 26
 #define POS_LH_C2R4 38
 #define POS_LH_C2R5 50
 #define POS_LH_C2R6 68
 #define POS_LH_C3R1 3
 #define POS_LH_C3R2 13
 #define POS_LH_C3R3 25
 #define POS_LH_C3R4 37
 #define POS_LH_C3R5 49
 #define POS_LH_C3R6 67
 #define POS_LH_C4R1 2
 #define POS_LH_C4R2 12
 #define POS_LH_C4R3 24
 #define POS_LH_C4R4 36
 #define POS_LH_C4R5 48
 #define POS_LH_C4R6 66
 #define POS_LH_C5R1 1
 #define POS_LH_C5R2 11
 #define POS_LH_C5R3 23
 #define POS_LH_C5R4 35
 #define POS_LH_C5R5 47
 #define POS_LH_C5R6 65
 #define POS_LH_C6R1 0
 #define POS_LH_C6R2 10
 #define POS_LH_C6R3 22
 #define POS_LH_C6R4 34
 #define POS_LH_C6R5 46
 #define POS_LH_C6R6 64

#define POS_RH_T1 57
 #define POS_RH_T2 56
 #define POS_RH_T3 55
 #define POS_RH_T4 74
 #define POS_RH_T5 73
 #define POS_RH_T6 72
 #define POS_RH_C1R2 16
 #define POS_RH_C1R3 28
 #define POS_RH_C1R4 40
 #define POS_RH_C1R5 58
 #define POS_RH_C2R1 5
 #define POS_RH_C2R2 17
 #define POS_RH_C2R3 29
 #define POS_RH_C2R4 41
 #define POS_RH_C2R5 59
 #define POS_RH_C2R6 75
 #define POS_RH_C3R1 6
 #define POS_RH_C3R2 18
 #define POS_RH_C3R3 30
 #define POS_RH_C3R4 42
 #define POS_RH_C3R5 60
 #define POS_RH_C3R6 76
 #define POS_RH_C4R1 7
 #define POS_RH_C4R2 19
 #define POS_RH_C4R3 31
 #define POS_RH_C4R4 43
 #define POS_RH_C4R5 61
 #define POS_RH_C4R6 77
 #define POS_RH_C5R1 8
 #define POS_RH_C5R2 20
 #define POS_RH_C5R3 32
 #define POS_RH_C5R4 44
 #define POS_RH_C5R5 62
 #define POS_RH_C5R6 78
 #define POS_RH_C6R1 9
 #define POS_RH_C6R2 21
 #define POS_RH_C6R3 33
 #define POS_RH_C6R4 45
 #define POS_RH_C6R5 63
 #define POS_RH_C6R6 79

 #define KEYS_LEFT POS_LH_T1 POS_LH_T2 POS_LH_T3 POS_LH_T4 POS_LH_T5 POS_LH_T6 POS_LH_C1R2 POS_LH_C1R3 POS_LH_C1R4 POS_LH_C1R5 POS_LH_C2R1 POS_LH_C2R2 POS_LH_C2R3 POS_LH_C2R4 POS_LH_C2R5 POS_LH_C2R6 POS_LH_C3R1 POS_LH_C3R2 POS_LH_C3R3 POS_LH_C3R4 POS_LH_C3R5 POS_LH_C3R6 POS_LH_C4R1 POS_LH_C4R2 POS_LH_C4R3 POS_LH_C4R4 POS_LH_C4R5 POS_LH_C4R6 POS_LH_C5R1 POS_LH_C5R2 POS_LH_C5R3 POS_LH_C5R4 POS_LH_C5R5 POS_LH_C5R6 POS_LH_C6R1 POS_LH_C6R2 POS_LH_C6R3 POS_LH_C6R4 POS_LH_C6R5 POS_LH_C6R6 
 #define KEYS_RIGHT POS_RH_T1 POS_RH_T2 POS_RH_T3 POS_RH_T4 POS_RH_T5 POS_RH_T6 POS_RH_C1R2 POS_RH_C1R3 POS_RH_C1R4 POS_RH_C1R5 POS_RH_C2R1 POS_RH_C2R2 POS_RH_C2R3 POS_RH_C2R4 POS_RH_C2R5 POS_RH_C2R6 POS_RH_C3R1 POS_RH_C3R2 POS_RH_C3R3 POS_RH_C3R4 POS_RH_C3R5 POS_RH_C3R6 POS_RH_C4R1 POS_RH_C4R2 POS_RH_C4R3 POS_RH_C4R4 POS_RH_C4R5 POS_RH_C4R6 POS_RH_C5R1 POS_RH_C5R2 POS_RH_C5R3 POS_RH_C5R4 POS_RH_C5R5 POS_RH_C5R6 POS_RH_C6R1 POS_RH_C6R2 POS_RH_C6R3 POS_RH_C6R4 POS_RH_C6R5 POS_RH_C6R6  

 
 /* Custom Defined Behaviors */
 / {
 behaviors {
    hml: home_row_mod_left {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "balanced";
        require-prior-idle-ms = <150>;
        tapping-term-ms = <280>;
        quick-tap-ms = <175>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = < KEYS_RIGHT >; // List of keys on the right side of the keyboard
        hold-trigger-on-release;
    };

    hmr: home_row_mod_right {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "balanced";
        require-prior-idle-ms = <150>;
        tapping-term-ms = <280>;
        quick-tap-ms = <175>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = < KEYS_LEFT >; // List of keys on the right side of the keyboard
        hold-trigger-on-release;
    };

   //
   // Shift + LEFT_PARENTHESIS = LESS_THAN
   //
   parang_left: left_parenthesis_and_less_than {
     compatible = "zmk,behavior-mod-morph";
     #binding-cells = <0>;
     bindings = <&kp LPAR>, <&kp LT>;
     mods = <(MOD_LSFT|MOD_RSFT)>;
   };
 
   //
   // Shift + RIGHT_PARENTHESIS = GREATER_THAN
   //
   parang_right: right_parenthesis_and_greater_than {
     compatible = "zmk,behavior-mod-morph";
     #binding-cells = <0>;
     bindings = <&kp RPAR>, <&kp GT>;
     mods = <(MOD_LSFT|MOD_RSFT)>;
   };
 };
 };
 
 /* Automatically generated macro definitions */
 / {
     macros {
 
     };
 };
 
 /* Automatically generated behavior definitions */
 / {
     behaviors {
 
     };
 };
 
 /* Automatically generated combos definitions */
 
 
 /* Automatically generated keymap */
 / {
     keymap {
         compatible = "zmk,keymap";
 
 
         layer_Base {
             bindings = <
                &kp F2     &kp F3      &kp F4       &kp F5       &kp F6                                                                                       &kp F7           &kp F8        &kp F9   &kp F10    &kp F11
                &kp F1     &kp N1      &kp N2       &kp N3       &kp N4  &kp N5                                                                 &kp N6        &kp N7           &kp N8        &kp N9    &kp N0    &kp F12
                &kp UP      &kp Q       &kp W        &kp F        &kp P   &kp B                                                                  &kp J         &kp L            &kp U         &kp Y  &kp SEMI  &kp PG_UP
              &kp DOWN      &kp A       &kp R        &kp S        &kp T   &kp G                                                                  &kp M         &kp N            &kp E         &kp I     &kp O  &kp PG_DN
             &kp GRAVE      &kp Z  &mt LALT X  &mt LCTRL C  &mt LSHFT D   &kp V     &kp ESC      &none   &none   &none      &none      &kp TAB   &kp K         &none  &mt RCTRL COMMA  &mt RALT DOT  &kp FSLH      &none
  &magic LAYER_Magic 0  &kp MINUS   &kp EQUAL     &kp LBKT     &kp RBKT          &lt 3 BSPC  &lt 5 DEL   &none   &none  &lt 4 RET  &lt 2 SPACE          &parang_left    &parang_right       &kp SQT  &kp BSLH      &none
             >;
         };
 
         layer_Magic {
             bindings = <
   &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
        &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
        &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
  &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
   &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
        &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
             >;
         };
 
         layer_Symbol {
             bindings = <
   &none          &none          &none       &none          &none                                                                            &none       &none     &none        &none   &none
   &none          &none          &none       &none          &none   &none                                                      &none         &none       &none     &none        &none   &none
   &none          &none  &kp LS(MINUS)   &kp MINUS  &kp LS(EQUAL)   &none                                                      &none         &none       &none     &none        &none   &none
   &none  &kp LS(COMMA)       &kp LBKT  &kp LS(N9)   &kp LS(LBKT)   &none                                                      &none  &kp RS(RBKT)  &kp RS(N0)  &kp RBKT  &kp RS(DOT)   &none
   &none          &none          &none    &kp FSLH     &kp LS(N8)   &none      &none   &none   &none   &none   &none   &none   &none         &none       &none     &none        &none   &none
   &none          &none          &none       &none          &none          &kp EQUAL   &none   &none   &none   &none   &none                 &none       &none     &none        &none   &none
             >;
         };
 
         layer_Nav {
             bindings = <
   &none   &none         &none     &none          &none                                                                          &none       &none        &none      &none   &none
   &none   &none         &none     &none          &none      &none                                                   &none       &none       &none        &none      &none   &none
   &none   &none      &kp HOME    &kp UP        &kp END  &kp PG_UP                                                   &none  &kp K_FIND      &kp F3   &kp RS(F3)  &kp PG_UP   &none
   &none   &none      &kp LEFT  &kp DOWN      &kp RIGHT  &kp PG_DN                                                   &none   &kp RSHFT  &kp K_UNDO   &kp K_REDO  &kp PG_DN   &none
   &none   &none  &kp RC(LEFT)     &none  &kp RC(RIGHT)      &none  &trans  &trans  &trans  &trans  &trans  &trans   &none   &kp K_CUT  &kp K_COPY  &kp K_PASTE      &none   &none
   &none   &none         &none     &none          &none             &trans  &trans  &trans  &trans  &trans  &trans               &none       &none        &none      &none   &none
             >;
         };
 
         layer_Num {
             bindings = <
   &none   &none      &none       &none      &none                                                                   &none    &none    &none    &none   &none
   &none   &none      &none       &none      &none   &none                                                   &none   &none    &none    &none    &none   &none
   &none   &none  &kp KP_N7   &kp KP_N8  &kp KP_N9   &none                                                   &none  &kp F9  &kp F10  &kp F11  &kp F12   &none
   &none   &none  &kp KP_N4   &kp KP_N5  &kp KP_N6   &none                                                   &none  &kp F5   &kp F6   &kp F7   &kp F8   &none
   &none   &none  &kp KP_N1   &kp KP_N2  &kp KP_N3   &none   &none   &none   &none   &none   &none   &none   &none  &kp F1   &kp F2   &kp F3   &kp F4   &none
   &none   &none  &kp KP_N0  &kp KP_DOT      &none           &none   &none   &none   &none   &none   &none           &none    &none    &none    &none   &none
             >;
         };
 
         layer_VS {
             bindings = <
   &none   &none   &none   &none   &none                                                                              &none              &none   &none   &none   &none
   &none   &none   &none   &none   &none   &none                                                   &none              &none              &none   &none   &none   &none
   &none   &none   &none   &none   &none   &none                                                   &none  &kp RC(RA(PG_UP))  &kp RC(RA(PG_DN))   &none   &none   &none
   &none   &none   &none   &none   &none   &none                                                   &none      &kp RC(MINUS)  &kp RC(RS(MINUS))   &none   &none   &none
   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none              &none              &none   &none   &none   &none
   &none   &none   &none   &none   &none           &none   &none   &none   &none   &none   &none                      &none              &none   &none   &none   &none
             >;
         };
 
     };
 };
 